```yaml  
openapi: 3.0.0
info:
  title: Book API
  description: This API allows you to manage books.
  version: 1.0.0
  contact:
    name: John Doe
    email: john.doe@example.com

servers:
  - url: https://lms.com/books
    description: Production server
  - url: https://qa.lms.com/books
    description: QA server

paths:
  /books:
    get:
      summary: Get a list of all books
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
    post:
      summary: Create a new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /books/{book_id}:
    get:
      summary: Fetch an existing book by name
      parameters:
        - in: path
          name: book_id
          schema:
            type: string
          required: true
          description: The ID of the book to fetch
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      summary: Edit an existing book
      parameters:
        - in: path
          name: book_id
          schema:
            type: string
          required: true
          description: The ID of the book to edit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        author:
          type: string
        publisher:
          type: integer
          format: int64
        year_of_publication:
          type: integer
          format: int32
        isbn:
          type: string
        price:
          type: number
          format: double
        quantity_in_stock:
          type: integer
          format: int32
        quantity_available:
          type: integer
          format: int32
    BookRequest:
      type: object
      required:
        - title
        - author
        - publisher
        - year_of_publication
        - isbn
        - price
        - quantity_in_stock
        - quantity_available
      properties:
        title:
          type: string
        author:
          type: string
        publisher:
          type: integer
          format: int64
        year_of_publication:
          type: integer
          format: int32
        isbn:
          type: string
        price:
          type: number
          format: double
        quantity_in_stock:
          type: integer
          format: int32
        quantity_available:
          type: integer
          format: int32
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  parameters:
    book_id:
      name: book_id
      in: path
      description: The ID of the book
      required: true
      schema:
        type: string
  responses:
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'  
```